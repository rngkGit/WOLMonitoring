//
//  EditComputerView.swift
//  WOLMonitoring
//
//  Created by Keith Beavers on 9/25/25.
//

// Generated by Google Gemini 2.5 Pro/Flash on Thu Sep 25th, 2025 @ 1003

import SwiftUI

struct EditComputerView: View {
    @Binding var computer: Computer
    @Environment(\.dismiss) var dismiss

    @State private var computerName: String
    
    private var isFormValid: Bool {
        // Form is valid if computerName is not empty and all components are valid.
        return !computerName.trimmingCharacters(in: .whitespaces).isEmpty && areAllComponentsValid()
    }
    
    private func areAllComponentsValid() -> Bool {
        for component in computer.components {
            switch component {
            case .macAddress(let macData):
                if !macData.isValid { return false }
            case .ipAddress(let ipData):
                if !ipData.isValid { return false }
            case .sensor:
                // No validation needed for sensor data currently.
                continue
            }
        }
        return true
    }
    
    // A computed property to check if a MAC address component exists
    private var hasMACAddressComponent: Bool {
        computer.components.contains { component in
            if case .macAddress = component { return true }
            return false
        }
    }

    init(computer: Binding<Computer>) {
        _computer = computer
        _computerName = State(initialValue: computer.wrappedValue.name ?? "")
    }

    var body: some View {
        NavigationStack {
            Form {
                Section("Computer Details") {
                    TextField("Computer Name", text: $computerName)
                }
                
                Section("Details") {
                    ForEach($computer.components) { $component in
                        ComponentEditView(component: $component)
                    }
                    .onDelete(perform: deleteComponent)
                    .onMove(perform: moveComponent)
                }
            }
            .navigationTitle("Edit Computer")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .cancellationAction) {
                    Button("Cancel", role: .cancel) {
                        dismiss()
                    }
                }
                ToolbarItem(placement: .topBarTrailing) {
                    EditButton()
                }
                ToolbarItem(placement: .topBarTrailing) {
                    Menu {
                        Button("Add IP Address") {
                            let newIP = IPData()
                            computer.components.append(.ipAddress(newIP))
                        }
                        Button("Add Sensor") {
                            let newSensor = SensorData(type: "CPU Temp", unit: "ºC")
                            computer.components.append(.sensor(newSensor))
                        }
                        Button("Add MAC Address") {
                            let newMAC = MACAddressData()
                            computer.components.append(.macAddress(newMAC))
                        }
                        .disabled(hasMACAddressComponent) // Disable if one already exists
                    } label: {
                        Label("Add Component", systemImage: "plus")
                    }
                }
                ToolbarItem(placement: .confirmationAction) {
                    Button("Save") {
                        if isFormValid {
                            computer.name = computerName
                            
                            // If a CPU Temp sensor exists but no IP, add a default one.
                            let hasCPUTempSensor = computer.components.contains {
                                if case .sensor(let sData) = $0, sData.type == "CPU Temp" { return true } else { return false }
                            }
                            let hasIPAddress = computer.components.contains {
                                if case .ipAddress = $0 { return true } else { return false }
                            }
                            if hasCPUTempSensor && !hasIPAddress {
                                computer.components.append(.ipAddress(IPData()))
                            }
                            
                            dismiss()
                        }
                    }
                    .disabled(!isFormValid) // Disable Save button if form is not valid
                }
            }
        }
    }
    
    private func deleteComponent(at offsets: IndexSet) {
        computer.components.remove(atOffsets: offsets)
    }
    
    private func moveComponent(from source: IndexSet, to destination: Int) {
        computer.components.move(fromOffsets: source, toOffset: destination)
    }
}

fileprivate struct ComponentEditView: View {
    @Binding var component: Component
    @State private var macAddressError: String?
    @State private var ipAddressError: String?
    
    var body: some View {
        // Switch on the wrappedValue of the binding, then use the new sub-bindings.
        switch component {
        case .ipAddress:
            if let ipDataBinding = $component.ipAddress {
                VStack(alignment: .leading) {
                    Text("IP Address")
                        .font(.caption)
                        .foregroundStyle(.secondary)
                    TextField("Address", text: ipDataBinding.address)
                        .autocorrectionDisabled()
                        .textInputAutocapitalization(.never)
                        .keyboardType(.decimalPad)
                        .onChange(of: ipDataBinding.wrappedValue.address) {
                            validateIPAddressInput(ipDataBinding.wrappedValue.address)
                        }
                    
                    if let error = ipAddressError {
                        Text(error)
                            .font(.caption)
                            .foregroundStyle(.red)
                    }
                }
                .onAppear {
                    // Perform initial validation.
                    validateIPAddressInput(ipDataBinding.wrappedValue.address)
                }
            }
            
        case .macAddress:
            if let macDataBinding = $component.macAddress {
                VStack(alignment: .leading) {
                    Text("MAC Address")
                        .font(.caption)
                        .foregroundStyle(.secondary)
                    TextField("Address", text: macDataBinding.address)
                        .autocorrectionDisabled()
                        .textInputAutocapitalization(.never)
                        .onChange(of: macDataBinding.wrappedValue.address) {
                            validateMacAddressInput(macDataBinding.wrappedValue.address)
                        }
                    
                    if let error = macAddressError {
                        Text(error)
                            .font(.caption)
                            .foregroundStyle(.red)
                    }
                }
                .onAppear {
                    // Perform initial validation.
                    validateMacAddressInput(macDataBinding.wrappedValue.address)
                }
            }
            
        case .sensor:
            if let sensorDataBinding = $component.sensor {
                VStack(alignment: .leading) {
                    Text("Sensor")
                        .font(.caption)
                        .foregroundStyle(.secondary)

                    Picker("Sensor Type", selection: sensorDataBinding.type) {
                        Text("CPU Temp").tag("CPU Temp")
                    }
                    .onChange(of: sensorDataBinding.type.wrappedValue) {
                        sensorDataBinding.name.wrappedValue = sensorDataBinding.type.wrappedValue
                        if sensorDataBinding.type.wrappedValue == "CPU Temp" {
                            sensorDataBinding.unit.wrappedValue = "ºC"
                        }
                    }

                    HStack {
                        Text(sensorDataBinding.wrappedValue.type == "CPU Temp" ? "\(String(format: "%.1f", sensorDataBinding.wrappedValue.value))" : "")
                            .frame(maxWidth: .infinity, alignment: .leading)
                        
                        if sensorDataBinding.wrappedValue.type != "CPU Temp" {
                            TextField("Value", value: sensorDataBinding.value, format: .number)
                                .keyboardType(.decimalPad)
                        }
                        
                        Divider()
                        TextField("Unit", text: sensorDataBinding.unit)
                            .autocorrectionDisabled()
                            .textInputAutocapitalization(.never)
                            .frame(width: 50)
                            .disabled(sensorDataBinding.type.wrappedValue == "CPU Temp")
                    }
                }
            }
        }
    }
    
    /// Validates the given MAC address input and updates the `macAddressError` state.
    private func validateMacAddressInput(_ input: String) {
        let trimmedInput = input.trimmingCharacters(in: .whitespaces)
        
        if trimmedInput.isEmpty {
            macAddressError = "MAC Address cannot be empty."
        } else if !MACAddressData.isValidMACAddress(trimmedInput) {
            macAddressError = "Invalid MAC Address format. E.g., 00:11:22:33:44:55"
        } else {
            macAddressError = nil // MAC address is valid
        }
    }
    
    /// Validates the given IP address input and updates the `ipAddressError` state.
    private func validateIPAddressInput(_ input: String) {
        let trimmedInput = input.trimmingCharacters(in: .whitespaces)
        
        if trimmedInput.isEmpty {
            ipAddressError = "IP Address cannot be empty."
        } else if !IPData.isValidIPAddress(trimmedInput) {
            ipAddressError = "Invalid IP Address format. E.g., 192.168.1.1"
        } else {
            ipAddressError = nil // IP address is valid
        }
    }
}
